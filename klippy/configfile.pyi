from typing import Any, Dict, List, Optional, Set, Tuple, Union
import configparser
from .klippy import Printer

error: Any

class sentinel:
    ...

class ConfigWrapper:
    error: configparser.Error
    printer: Printer

    def __init__(self, printer: Any, fileconfig: configparser.RawConfigParser, access_tracking: Dict, section: str) -> None: ...
    def get_printer(self) -> Any: ...
    def get_name(self) -> str: ...
    def get(self, option: str, default: Any = sentinel, note_valid: bool = True) -> Any: ...
    def getint(self, option: str, default: Any = sentinel, minval: Optional[int] = None, maxval: Optional[int] = None, note_valid: bool = True) -> int: ...
    def getfloat(self, option: str, default: Any = sentinel, minval: Optional[float] = None, maxval: Optional[float] = None, above: Optional[float] = None, below: Optional[float] = None, note_valid: bool = True) -> float: ...
    def getboolean(self, option: str, default: Any = sentinel, note_valid: bool = True) -> bool: ...
    def getchoice(self, option: str, choices: Union[List[Any], Dict[Any, Any]], default: Any = sentinel, note_valid: bool = True) -> Any: ...
    def getlists(self, option: str, default: Any = sentinel, seps: Tuple[str, ...] = (',',), count: Optional[int] = None, parser: Any = str, note_valid: bool = True) -> Tuple[Any, ...]: ...
    def getlist(self, option: str, default: Any = sentinel, sep: str = ',', count: Optional[int] = None, note_valid: bool = True) -> Tuple[str, ...]: ...
    def getintlist(self, option: str, default: Any = sentinel, sep: str = ',', count: Optional[int] = None, note_valid: bool = True) -> Tuple[int, ...]: ...
    def getfloatlist(self, option: str, default: Any = sentinel, sep: str = ',', count: Optional[int] = None, note_valid: bool = True) -> Tuple[float, ...]: ...
    def getsection(self, section: str) -> 'ConfigWrapper': ...
    def has_section(self, section: str) -> bool: ...
    def get_prefix_sections(self, prefix: str) -> List['ConfigWrapper']: ...
    def get_prefix_options(self, prefix: str) -> List[str]: ...
    def deprecate(self, option: str, value: Optional[Any] = None) -> None: ...

class ConfigFileReader:
    def read_config_file(self, filename: str) -> str: ...
    def build_config_string(self, fileconfig: configparser.RawConfigParser) -> str: ...
    def append_fileconfig(self, fileconfig: configparser.RawConfigParser, data: str, filename: str) -> None: ...
    def _create_fileconfig(self) -> configparser.RawConfigParser: ...
    def build_fileconfig(self, data: str, filename: str) -> configparser.RawConfigParser: ...
    def _resolve_include(self, source_filename: str, include_spec: str, fileconfig: configparser.RawConfigParser, visited: Set[str]) -> List[str]: ...
    def _parse_config(self, data: str, filename: str, fileconfig: configparser.RawConfigParser, visited: Set[str]) -> None: ...
    def build_fileconfig_with_includes(self, data: str, filename: str) -> configparser.RawConfigParser: ...

class ConfigAutoSave:
    def __init__(self, printer: Any) -> None: ...
    def _find_autosave_data(self, data: str) -> Tuple[str, str]: ...
    def _strip_duplicates(self, data: str, fileconfig: configparser.RawConfigParser) -> str: ...
    def load_main_config(self) -> Tuple[configparser.RawConfigParser, configparser.RawConfigParser]: ...
    def get_status(self, eventtime: float) -> Dict[str, Any]: ...
    def set(self, section: str, option: str, value: Any) -> None: ...
    def remove_section(self, section: str) -> None: ...
    def _disallow_include_conflicts(self, regular_fileconfig: configparser.RawConfigParser) -> None: ...
    def cmd_SAVE_CONFIG(self, gcmd: Any) -> None: ...

class ConfigValidate:
    def __init__(self, printer: Any) -> None: ...
    def start_access_tracking(self, autosave_fileconfig: configparser.RawConfigParser) -> Dict: ...
    def check_unused(self, fileconfig: configparser.RawConfigParser) -> None: ...
    def get_status(self, eventtime: float) -> Dict[str, Any]: ...

class PrinterConfig:
    def __init__(self, printer: Any) -> None: ...
    def get_printer(self) -> Any: ...
    def read_config(self, filename: str) -> ConfigWrapper: ...
    def read_main_config(self) -> ConfigWrapper: ...
    def log_config(self, config: ConfigWrapper) -> None: ...
    def check_unused_options(self, config: ConfigWrapper) -> None: ...
    def runtime_warning(self, msg: str) -> None: ...
    def deprecate(self, section: str, option: str, value: Optional[Any] = None, msg: Optional[str] = None) -> None: ...
    def get_status(self, eventtime: float) -> Dict[str, Any]: ...
    def set(self, section: str, option: str, value: Any) -> None: ...
    def remove_section(self, section: str) -> None: ...
